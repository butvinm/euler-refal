/* The MIT License (MIT)

Copyright © 2024 Mikhail Butvin


Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the “Software”), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/


/* Generator abstraction and utils for Refal 5 Lambda.

Generator function interface:

  MyGenerator {
    () = t.InitCtx t.Next;
    t.Ctx = t.NewCtx t.Next;
    t.Ctx = Gen-Stop;
  }

Example:

  Fib {
    () = (1 1) 1;
    (8 13) = Gen-Stop;
    (s.PP s.P)
      = <Add s.PP s.P> : s.Next
      = (s.P s.Next) s.Next;
  }
*/


/* Expands generator to an object expression.

Usage:
  = <Gen-Iter &Fib> : 1 1 2 3 5 8 13
  = <Gen-Iter &Fib (3 5)> : 8 13
*/
$ENTRY Gen-Iter {
  s.Gen = <Gen-Iter s.Gen ()>;

  s.Gen (e.Ctx)
    = <s.Gen (e.Ctx)> : {
      Gen-Stop = ;
      (e.NewCtx) e.Next = (e.Next) <Gen-Iter s.Gen (e.NewCtx)>;
    };
}


/* Python-like range generator. Yields integers from s.Start to s.Stop with step s.Step.

Usage:
  * Call without arguments will generate infinite sequence of integers starting from 0
  = <Gen-Iter <Gen-Range>> : (0 )(1 )(2 )(3 )(4 )(5 )(6 )(7 )(8 )(9 )...

  * Call with start and stop values (macrodigits)
  = <Gen-Iter <Gen-Range 3 10>> : (3 )(4 )(5 )(6 )(7 )(8 )(9 )

  * Call with start, stop and step values. Start and stop is macrodigits, step is a number
  = <Gen-Iter <Gen-Range 3 10 2>> : (3 )(5 )(7 )(9 )

  * Call with start, stop and step values. All values are numbers
  = <Gen-Iter <Gen-Range (1 0) (1 10) 2>> : (1 0)(1 2)(1 4)(1 6)(1 8)
*/
$ENTRY Gen-Range {
  = <Gen-Range (0) (Inf) 1>;

  s.Start s.Stop = <Gen-Range (s.Start) (s.Stop) 1>;

  s.Start s.Stop s.Step = <Gen-Range (s.Start) (s.Stop) s.Step>;

  (e.Start) (e.Stop) e.Step
    = {
      () = <Gen-RangeImpl ((e.Start) (e.Stop) e.Step)>;
      (e.Ctx) = <Gen-RangeImpl (e.Ctx)>;
    };
}


Gen-RangeImpl {
  ((e.Start) (Inf) e.Step)
    = <Add (e.Start) e.Step> : e.Next
    = ((e.Next) (Inf) e.Step) e.Start;

  ((e.Start) (e.Stop) e.Step)
    = <Add (e.Start) e.Step> : e.Next
    = <Compare (e.Start) e.Stop> : {
      '-' = ((e.Next) (e.Stop) e.Step) e.Start;
      e._ = Gen-Stop;
    };
}


/* Yields while values satisfy predicate.

Usage:
  = <Gen-Iter
    <Gen-TakeWhile
      { e.Val = <Compare 5 e.Val> : { '+' = True; e._ = False } }
      <Gen-Range 1 10>
    >
  > : ((0 )(1 )(2 )(3 )(4 )
*/
$ENTRY Gen-TakeWhile {
  s.Pred s.Gen
    = {
      (e.Ctx)
        = <s.Gen (e.Ctx)> : {
          Gen-Stop = Gen-Stop;
          (e.NewCtx) e.Next
            = <s.Pred e.Next> : {
              False = Gen-Stop;
              True = (e.NewCtx) e.Next;
          };
        };
    };
}

/* Skips values while they satisfy predicate.

Usage:
  = <Gen-Iter
    <Gen-DropWhile
      { e.Val = <Compare 5 e.Val> : { '+' = True; e._ = False } }
      <Gen-Range 1 10>
    >
  > : ((5 )(6 )(7 )(8 )(9 )
*/
$ENTRY Gen-DropWhile {
  s.Pred s.Gen
    = {
      (e.Ctx)
        = <s.Gen (e.Ctx)> : {
          Gen-Stop = Gen-Stop;
          (e.NewCtx) e.Next
            = <s.Pred e.Next> : {
              False = (e.NewCtx) e.Next;
              True = <<Gen-DropWhile s.Pred s.Gen> (e.NewCtx)>;
          };
        };
    };
}


/* Yields only values satisfying predicate.

Usage:
  = <Gen-Iter
    <Gen-Filter
      { e.Val = <Mod (e.Val) 2> : { 0 = True; e._ = False } }
      <Gen-Range>
    >
  > : (5 )(6 )(7 )(8 )...
*/
$ENTRY Gen-Filter {
  s.Pred s.Gen
    = {
      (e.Ctx)
        = <s.Gen (e.Ctx)> : {
          Gen-Stop = Gen-Stop;
          (e.NewCtx) e.Next
            = <s.Pred e.Next> : {
              True = (e.NewCtx) e.Next;
              False = <<Gen-Filter s.Pred s.Gen> (e.NewCtx)>;
          };
        };
    };
}


/* Yields values from two generators sequentially.

Usage:
  = <Gen-Iter
    <Gen-Chain
      <Gen-Range 1 5>
      <Gen-Range 6 10>
      <Gen-Range 11 15>
    >
  > : (1 )(2 )(3 )(4 )(5 )(6 )(7 )(8 )(9 )(10 )(11 )(12 )(13 )(14 )(15 )
*/
$ENTRY Gen-Chain {
  = { (e.Ctx) = Gen-Stop };

  e.Gens
    = {
      ()
        = e.Gens : s.Gen e.Rest
        = <s.Gen ()> : (e.NewCtx) e.Next
        = ((e.NewCtx) e.Gens) e.Next;

      ((e.Ctx) e.Gens^)
        = e.Gens : s.Gen e.Rest
        = <s.Gen (e.Ctx)> : {
          Gen-Stop = <<Gen-Chain e.Rest> ()>;
          (e.NewCtx) e.Next = ((e.NewCtx) e.Gens) e.Next;
        };
    }
}


/* Map generator values with a function.

Usage:
  = <Gen-Iter
    <Gen-Map
      &Inc
      <Gen-Range 1 5>
    >
  > : (2 )(3 )(4 )(5 )(6 )
*/
$ENTRY Gen-Map {
  s.F s.Gen
    = {
      (e.Ctx)
        = <s.Gen (e.Ctx)> : {
          Gen-Stop = Gen-Stop;
          (e.NewCtx) e.Next = (e.NewCtx) <s.F e.Next>;
        };
    };
}


/* Reduce generator values with a function.

Usage:
  = <Gen-Iter
    <Gen-Reduce
      &Add
      0
      <Gen-Range 1 5>
    >
*/
$ENTRY Gen-Reduce {
  s.F e.Acc s.Gen = <Gen-DoReduce s.F (e.Acc) s.Gen ()>;
}


Gen-DoReduce {
  s.F (e.Acc) s.Gen (e.Ctx)
    = <s.Gen (e.Ctx)> : {
      Gen-Stop = e.Acc;
      (e.NewCtx) e.Next
        = <s.F (e.Acc) e.Next> : e.NewAcc
        = <Gen-DoReduce s.F (e.NewAcc) s.Gen (e.NewCtx)>;
    };
}
