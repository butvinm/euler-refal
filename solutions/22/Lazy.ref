*$FROM lib/Generators
$EXTERN Gen-Iter, Gen-Map, Gen-Stop, Gen-FromIter;


$ENTRY Go {
  = <Prout
    <LazySolution-22
      '"MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN","MARGARET","DOROTHY","LISA","NANCY","KAREN","BETTY"'
    >
  >;
}


$ENTRY LazySolution-22 {
  e.NamesStr
    = <Split ',' e.NamesStr> : e.Names
    = <Gen-Map &StripQuotes e.Names> : e.Names^
    = <Gen-FromIter <LexSort <Gen-Iter e.Names>>> : e.Names^
    = <Prout e.Names>;
    /* = <GetPosAndScores e.Names> : e.PS
    = <CalculateTotalScore e.PS>; */
}


/* Split returns a generator (aka lazy collection).

Refer to lib/Generators for more information.
*/
Split {
  s.Delim e.Line
    = {
      () = <<SplitSw s.Delim> e.Line>;
      (Gen-Stop) = Gen-Stop;
      (e.Line^) = <<SplitSw s.Delim> e.Line>;
    };
}


SplitSw {
  s.Delim = {
    /* empty */ = Gen-Stop;
    e.B s.Delim e.E = (e.E) (e.B);
    e.B /* empty */ = (Gen-Stop) (e.B);
  };
}


StripQuotes {
  ('"' e.Name '"') = e.Name;
  (e.Name) = e.Name;
}


LexCompare {
  (/* empty */) /* empty */ = '0';
  (s.C e.Word0) /* empty */ = '+';
  (/* empty */) s.C e.Word1 = '-';
  (s.C0 e.Word0) s.C1 e.Word1
    = <Compare <Ord s.C0> <Ord s.C1>> : {
      '0' = <LexCompare (e.Word0) e.Word1>;
      s.R = s.R;
    };
}


LexSort {
  /* empty */ = /* empty */;
  (e.Name) e.Names
    = <FilterLess (e.Name) e.Names> : e.Less
    = <FilterGreater (e.Name) e.Names> : e.Greater
    = <LexSort e.Less> (e.Name) <LexSort e.Greater>;
}


/* GetPosAndScores {
  e.Names
} */
